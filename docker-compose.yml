version: '3.8'
services:
  mysql:
    image: mysql
    container_name: mysql
    restart: always
    ports:
      - 3308:3306
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: tiempos_en_vivo
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  # Servicio de Laravel (backend)
  laravel:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: laravel
    restart: always
    volumes:
      - backend_app:/var/www/apitev/
      - backend-archivos:/var/www/apitev/public/storage/
      # - ./nginx/php/php.ini:/usr/local/etc/php/conf.d/php.ini
    expose:
      - "9000"  # Exponemos PHP-FPM en el puerto 9000
      # - "6001" # Puerto del WebSockets
    ports:
      - "6001:6001"
    depends_on:
      - mysql
    networks:
      - app-network

  # Servicio de Next.js (frontend)
  nextjs:
    build:
      context: ./client-web
      dockerfile: Dockerfile
    container_name: nextjs
    restart: always
    # volumes:
    #   - frontend_app:/app/.next

    ports:
      - "3000:3000"  # Exponemos Next.js en el puerto 3000
    depends_on:
      - laravel
    environment:
      - NEXT_PUBLIC_SERVER_URI=http://api.rallycronos.com/
    networks:
      - app-network
    command: sh -c "node server.js"
    

  # ! MANUAL SIN SSL LARAVEL + NEXTJS
  # Servicio de Nginx
  # nginx:
  #   image: nginx:latest
  #   container_name: nginx
  #   volumes:
  #     - frontend_app:/var/www/next_app
  #     - backend_app:/var/www/apitev
  #     - ./nginx/conf.d/:/etc/nginx/conf.d/
  #   restart: always
  #   ports:
  #     - "80:80"     # Expone el puerto 80 para el tráfico HTTP
  #     - "443:443"   # Expone el puerto 443 para el tráfico HTTPS
  #   depends_on:
  #     - laravel
  #     - nextjs
  #   networks:
  #     - app-network

  # ? Intento de levantar ambos, (solo sirvio para nextjs)
  # nginx:
  #   image: 'jc21/nginx-proxy-manager:latest'
  #   container_name: nginx
  #   volumes:
  #     - frontend_app:/var/www/next_app
  #     - backend_app:/var/www/apitev
  #     - ./letsencrypt:/etc/letsencrypt
  #     - ./data:/data
  #     - ./nginx-proxy-manager:/config
  #   restart: always
  #   ports:
  #     - '80:80'
  #     - '443:443'
  #     # Admin Web Port:
  #     - '81:81'
  #   depends_on:
  #     - laravel
  #     - nextjs
  #   networks:
  #     - app-network

  # # todo intento para levantar separados
  # # Servicio de Nginx Proxy Manager
  nginx-proxy-manager:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: nginx-proxy-manager
    volumes:
      - ./letsencrypt:/etc/letsencrypt
      - ./data:/data
      - ./nginx-proxy-manager:/config
    restart: always
    ports:
      - '80:80'      # Exposición de HTTP para el frontend Next.js
      - '443:443'    # Exposición de HTTPS para el frontend Next.js
      - '81:81'      # Puerto para el panel de administración de Nginx Proxy Manager
    depends_on:
      - nextjs
    networks:
      - app-network

  # Servicio de Nginx manual para la API de Laravel
  nginx-laravel:
    image: nginx:latest
    container_name: nginx-laravel
    volumes:
      - backend_app:/var/www/apitev
      - backend-archivos:/var/www/apitev/public/storage/
      - ./nginx/conf.d/:/etc/nginx/conf.d/
    restart: always
    ports:
      - "8080:80"   # Exposición de HTTP en el puerto 8080 para la API de Laravel
    depends_on:
      - laravel
    networks:
      - app-network

# Definir volúmenes persistentes
volumes:
  mysql_data:
    driver: local
  frontend_app:
    driver: local
  backend_app:
    driver: local
  backend-archivos:
    driver: local


# Definir red de la aplicación
networks:
  app-network:
    external: true
